load(?)

#一次性把数据预处理好存储，然后不用每次运行的时候都来处理
australian_xls$DV<-factor(ifelse(australian_xls$DV==0,"Zero","One"))
names(australian_xls)
dim(australian_xls)
sum(is.na(australian_xls$DV))
australian_xls=na.omit(australian_xls)
dim(australian_xls)
sum(is.na(australian_xls))
set.seed(2)
ind <- sample(2,nrow(australian_xls),replace=TRUE,prob=c(0.7,0.3)) ?使用caret包里面的create partion 来划分集
trainset<-australian_xls[ind==1,]
testset<-australian_xls[ind==2,]
dim(trainset)
str(trainset)
dim(testset)
str(testset)



#fisrt,I want to get the full logistic model
logisticmod=glm(trainset$DV~.,data=trainset,family="binomial")
logisticmod
ZeroProb<-predict(logisticmod,newdata=testset,type="response")
library(pROC)
install.packages("pROC")
logisticroc1<-roc(response=testset$DV,predictor=ZeroProb,levels=rev(levels(testset$DV)))
logisticauc1<-auc(logisticroc1)
logisticauc1
ZeroProb<-factor(ifelse(ZeroProb>0.5,"Zero","One"))
library(glmnet)
library(caret)  #所以library都应该在开始完成
confusionMatrix(data=ZeroProb,reference=testset$DV,positive="Zero")
logisticconfusionMatrix1=confusionMatrix

#框架应该按阶段分，不是按方法分
#首先是数据划分，然后是建模，然后是模型评价
#After checking p values of the variables in logisticmod, I will retain C,E,H,J,M,N in my redctedlogisticmod.
reductedlogisticmod=glm(trainset$DV~C+E+H+J+M+N,data=trainset,family="binomial")
summary(reductedlogisticmod)
ZeroProb<-predict(reductedlogisticmod,newdata=testset,type="response")
library(pROC)
reductedlogisticroc1<-roc(response=testset$DV,predictor=ZeroProb,levels=rev(levels(testset$DV)))
reductedlogisticauc1<-auc(reductedlogisticroc1)
reductedlogisticauc1
ZeroProb<-factor(ifelse(ZeroProb>0.5,"Zero","One"))
confusionMatrix(data=ZeroProb,reference=testset$DV,positive="Zero")
reductedlogisticconfusionMatrix1=confusionMatrix

#backward stepwise logistic model
backwardlogisticmod=step(logisticmod)
summary(backwardlogisticmod)
#I will remove the variable if it is not siginificant
ZeroProb<-predict(backwardlogisticmod,newdata=testset,type="response")
library(pROC)
backwardlogisticroc1<-roc(response=testset$DV,predictor=ZeroProb,levels=rev(levels(testset$DV)))
backwardlogisticauc1<-auc(backwardlogisticroc1)
backwardlogisticauc1
ZeroProb<-factor(ifelse(ZeroProb>0.5,"Zero","One"))
confusionMatrix(data=ZeroProb,reference=testset$DV,positive="Zero")
backwardlogisticconfusionMatrix1=confusionMatrix

#forward stepwise logistic model
nothing<-glm(trainset$DV~1,family="binomial")
forwardlogisticmod=step(nothing,scope=list(lower=formula(nothing),uper=formula(logisticmod),direction="forward")
summary(backwardlogisticmod)
#I will remove the variable if it is not siginificant
ZeroProb<-predict(forwardlogisticmod,newdata=testset,type="response")
library(pROC)
forwardlogisticroc1<-roc(response=testset$DV,predictor=ZeroProb,levels=rev(levels(testset$DV)))
forwardlogisticauc1<-auc(forwardlogisticroc1)
forwardlogisticauc1
ZeroProb<-factor(ifelse(ZeroProb>0.5,"Zero","One"))
confusionMatrix(data=ZeroProb,reference=testset$DV,positive="Zero")
forwardlogisticconfusionMatrix1=confusionMatrix

#backwards selection and forwards selection 
bothwayselectedlogisticmod=step(nothing,scope=list(lower=formula(nothing),uper=formula(logisticmod),direction="both")
summary(bothwayselectedlogisticmod)
#I will remove the variable if it is not siginificant
ZeroProb<-predict(forwardlogisticmod,newdata=testset,type="response")
library(pROC)
bothwayselectedlogisticroc1<-roc(response=testset$DV,predictor=ZeroProb,levels=rev(levels(testset$DV)))
bothwayselectedlogisticauc1<-auc(bothwayselectedlogisticroc1)
bothwayselectedlogisticauc1
ZeroProb<-factor(ifelse(ZeroProb>0.5,"Zero","One"))
confusionMatrix(data=ZeroProb,reference=testset$DV,positive="Zero")
bothwayselectedlogisticconfusionMatrix1=confusionMatrix

#lasso logistic model
ctrl<-trainControl(method="LGOCV",summaryFunction=twoClassSummary,classProbs = TRUE, savePredictions = TRUE)
lasso.mod=glmnet(x=as.matrix(trainset[,1:14]),y=trainset$DV,alpha=1,lambda=10^seq(10,-2,length=100),family="binomial")
plot(lasso.mod)
glmnGrid<-expand.grid(.alpha=c(1),.lambda=10^seq(10,-2,length=100))
glmnTuned<-train(x=trainset[,1:14],y=trainset$DV,method="glmnet",tuneGrid=glmnGrid,preProc=c("center","scale"),metric="ROC",trControl=ctrl)
glmnTuned
lasso.mod=glmnet(x=as.matrix(trainset[,1:14]),y=trainset$DV,alpha=1,lambda=0.01,family="binomial")
lasso.mod
predict(lasso.mod,type="coefficients",s=0.01)[1:15,]
ZeroProb<-predict(lasso.mod,as.matrix(testset[,1:14]),type="response")
lassoroc1<-roc(response=testset$DV,predictor=ZeroProb,levels=rev(levels(testset$DV)))
lassoauc1<-auc(lassoroc1)
lassoauc1
ZeroProb<-factor(ifelse(ZeroProb>0.5,"Zero","One"))
confusionMatrix(data=ZeroProb,reference=testset$DV,positive="Zero")
lassoconfusionMatrix1=confusionMatrix

#ridge logistic model
ctrl<-trainControl(method="LGOCV",summaryFunction=twoClassSummary,classProbs = TRUE, savePredictions = TRUE)
glmnGrid<-expand.grid(.alpha=c(0),.lambda=10^seq(10,-2,length=100))
glmnTuned<-train(x=trainset[,1:14],y=trainset$DV,method="glmnet",tuneGrid=glmnGrid,preProc=c("center","scale"),metric="ROC",trControl=ctrl)
glmnTuned
ridge.mod=glmnet(x=as.matrix(trainset[,1:14]),y=trainset$DV,alpha=0,lambda=0.04037017,family="binomial")
ridge.mod 
predict(ridge.mod,type="coefficients",s=0.03053856)[1:15,]
ZeroProb<-predict(ridge.mod,as.matrix(testset[,1:14]),type="response")
ridgeroc1<-roc(response=testset$DV,predictor=ZeroProb,levels=rev(levels(testset$DV)))
ridgeauc1<-auc(ridgeroc1)
ridgeauc1
ZeroProb<-factor(ifelse(ZeroProb>0.5,"Zero","One"))
confusionMatrix(data=ZeroProb,reference=testset$DV,positive="Zero")
ridgeconfusionMatrix1=confusionMatrix

#penalized logistic model(combination of lasso and ridge)
ctrl<-trainControl(method="LGOCV",summaryFunction=twoClassSummary,classProbs = TRUE, savePredictions = TRUE)
glmnGrid<-expand.grid(.alpha=seq(0,1,length=10),.lambda=10^seq(10,-2,length=100))
glmnTuned<-train(x=trainset[,1:14],y=trainset$DV,method="glmnet",tuneGrid=glmnGrid,preProc=c("center","scale"),metric="ROC",trControl=ctrl)
glmnTuned
Penalized.mod=glmnet(x=as.matrix(trainset[,1:14]),y=trainset$DV,alpha=0.2222222,lambda=0.07054802,family="binomial")
Penalized.mod
predict(Penalized.mod,type="coefficients",s=0.01)[1:15,]
ZeroProb<-predict(Penalized.mod,as.matrix(testset[,1:14]),type="response")
penalizedroc1<-roc(response=testset$DV,predictor=ZeroProb,levels=rev(levels(testset$DV)))
penalizedauc1<-auc(penalizedroc1)
penalizedauc1
ZeroProb<-factor(ifelse(ZeroProb>0.5,"Zero","One"))
confusionMatrix(data=ZeroProb,reference=testset$DV,positive="Zero")
penalizedconfusionMatrix1=confusionMatrix
